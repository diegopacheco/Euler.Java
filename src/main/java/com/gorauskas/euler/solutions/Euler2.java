package com.gorauskas.euler.solutions;

import com.gorauskas.euler.Euler;
import com.gorauskas.euler.streams.StreamUtil;

import java.math.BigInteger;

public class Euler2 implements Euler {

    @Override
    public double Solve() {
        BigInteger two = new BigInteger("2");
        return StreamUtil.fibonacciSequence(35)
                .filter(i -> i.compareTo(BigInteger.valueOf(4000000)) < 0)
                .filter(i -> i.mod(two).equals(BigInteger.ZERO))
                .mapToLong(BigInteger::longValue)
                .sum();

        //return loopStrategy();
    }

    public double loopStrategy() {
        int x = 1, y = 1;
        int t = 0;
        int r = 0;

        while (t < 4000000) {
            t = x + y;
            y = x;
            x = t;

            if (t % 2 == 0) {
                r += t;
            }
        }

        return r;
    }

    @Override
    public String getProblem() {
        String s = new StringBuilder()
                .append("Project Euler Problem 2:\n")
                .append("\n")
                .append("  Each new term in the Fibonacci sequence is generated by adding the\n")
                .append("  previous two terms. By starting with 1 and 2, the first 10 terms\n")
                .append("  will be:\n")
                .append("\n")
                .append("    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n")
                .append("\n")
                .append("  By considering the terms in the Fibonacci sequence whose values do\n")
                .append("  not exceed four million, find the sum of the even-valued terms.\n")
                .toString();

        return s;
    }

    @Override
    public String getAnswer() {
        String s = String.format("The sum of the even-valued terms in a Fibonacci sequence\n" +
                                 "not exceeding 4 million is: %s", (long)this.Solve());
        return s;
    }

}
