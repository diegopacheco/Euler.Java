package com.gorauskas.euler.solutions;

import com.gorauskas.euler.Euler;

import java.util.List;
import java.util.function.LongPredicate;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.LongStream;

public class Euler44 implements Euler {
    @Override
    public double Solve() {
        var pentaList = getPentaList();

        for (var n : IntStream.rangeClosed(1, 2500).boxed().collect(Collectors.toList())) {
            for (var m : IntStream.rangeClosed(1, n).boxed().collect(Collectors.toList())) {
                var k = pentaList.get(n);
                var j = pentaList.get(m);

                if (isPentagonal.test(k + j) && isPentagonal.test(k - j)) {
                    return k - j;
                }
            }
        }

        return 0;
    }

    @Override
    public String getProblem() {
        return new StringBuilder()
                .append("Project Euler Problem 44\n")
                .append("\n")
                .append("    Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten\n")
                .append("    pentagonal numbers are:\n")
                .append("\n")
                .append("      1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...\n")
                .append("\n")
                .append("    It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference,\n")
                .append("    70 − 22 = 48, is not pentagonal.\n")
                .append("\n")
                .append("    Find the pair of pentagonal numbers, Pj and Pk, for which their sum and\n")
                .append("    difference are pentagonal and D = |Pk − Pj| is minimised; what is the value\n")
                .append("    of D?\n")
                .toString();
    }

    @Override
    public String getAnswer() {
        return String.format("The value of D is %s", (long)this.Solve());
    }

    private LongPredicate isPentagonal = x -> ((Math.sqrt((24.0 * x + 1.0)) + 1.0) / 6.0) % 1.0 == 0;

    private List<Long> getPentaList() {
        return LongStream.rangeClosed(1, 100000)
                .map(x -> x * (3 * x - 1) / 2)
                .boxed()
                .collect(Collectors.toList());
    }
}

